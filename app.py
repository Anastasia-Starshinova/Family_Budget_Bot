import requests
import json
import sqlite3
import psycopg2
import urllib.parse
import telebot
from telebot import types
from datetime import datetime
import re
import os
from flask import Flask, request


TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# DATABASE_URL = os.getenv("DATABASE_URL")
DATABASE_URL = os.getenv("DATABASE_URL").replace("postgres://", "postgresql://")
print(DATABASE_URL)  # –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É

conn = psycopg2.connect(DATABASE_URL)
print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
conn.close()

WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://familybudgetbot-production.up.railway.app{WEBHOOK_PATH}"

# url = f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={WEBHOOK_URL}"
# print(requests.get(url).json())

app = Flask(__name__)


@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    print('in @app.route')
    return '', 200


class ConvertionException(Exception):
    pass


class MyCustomException(Exception):
    pass


categories = {
    '–µ–¥–∞': ('food', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–ø—Ä–æ–¥—É–∫—Ç—ã'),
    '–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è': ('household_chemicals', '–±—ã—Ç–æ–≤—É—é —Ö–∏–º–∏—é', '–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è'),
    '–±—ã—Ç–æ–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å': ('household_equipment', '–±—ã—Ç–æ–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', '–±—ã—Ç–æ–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
    '–º–µ–±–µ–ª—å': ('furniture', '–º–µ–±–µ–ª—å', '–º–µ–±–µ–ª—å'),
    '–ø–æ—Å—É–¥–∞': ('dishes', '–ø–æ—Å—É–¥–∞', '–ø–æ—Å—É–¥–∞'),
    '–¥–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä': ('cosiness', '–¥–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä', '–¥–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä'),
    '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': ('stationery', '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã', '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã'),
    '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥/—à–∫–æ–ª–∞': ('school', '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥/—à–∫–æ–ª–∞', '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥/—à–∫–æ–ª–∞'),
    '–æ–¥–µ–∂–¥–∞': ('clothes', '–æ–¥–µ–∂–¥—É', '–æ–¥–µ–∂–¥–∞'),
    '—É–∫—Ä–∞—à–µ–Ω–∏—è/–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': ('accessories', '—É–∫—Ä–∞—à–µ–Ω–∏—è/–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—É–∫—Ä–∞—à–µ–Ω–∏—è/–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã'),
    '—Å–ø–æ—Ä—Ç': ('sport', '—Å–ø–æ—Ä—Ç', '—Å–ø–æ—Ä—Ç'),
    '—Ö–æ–±–±–∏': ('hobby', '—Ö–æ–±–±–∏', '—Ö–æ–±–±–∏'),
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–∫–∞—Ñ–µ': ('eating_out', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–∫–∞—Ñ–µ'),
    '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ('trips', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'),
    '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ('events', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'),
    '–∫–æ—Å–º–µ—Ç–∏–∫–∞/—É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã': ('cosmetic', '–∫–æ—Å–º–µ—Ç–∏–∫—É/—É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã', '–∫–æ—Å–º–µ—Ç–∏–∫–∞/—É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'),
    '–∑–¥–æ—Ä–æ–≤—å–µ': ('health', '–∑–¥–æ—Ä–æ–≤—å–µ', '–∑–¥–æ—Ä–æ–≤—å–µ'),
    '–¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ': ('pets', '–¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ', '–¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ'),
    '—Ç–µ—Ö–Ω–∏–∫–∞': ('technic', '—Ç–µ—Ö–Ω–∏–∫—É', '—Ç–µ—Ö–Ω–∏–∫–∞'),
    '–∞—Ä–µ–Ω–¥–∞': ('rent', '–∞—Ä–µ–Ω–¥—É –∫–≤–∞—Ä—Ç–∏—Ä—ã', '–∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã'),
    '–∏–ø–æ—Ç–µ–∫–∞': ('mortgage', '–∏–ø–æ—Ç–µ–∫–∞', '–∏–ø–æ—Ç–µ–∫–∞'),
    '—Ä–µ–º–æ–Ω—Ç': ('repair', '—Ä–µ–º–æ–Ω—Ç', '—Ä–µ–º–æ–Ω—Ç'),
    '–∫–æ–º–º—É–Ω–∞–ª–∫–∞': ('communal_apartment', '–∫–æ–º–º—É–Ω–∞–ª–∫—É', '–∫–æ–º–º—É–Ω–∞–ª–∫–∞'),
    '–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤': ('payment_of_bills', '–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤', '–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤'),
    '–∫—Ä–µ–¥–∏—Ç—ã/–¥–æ–ª–≥–∏': ('loans_debts', '–∫—Ä–µ–¥–∏—Ç—ã/–¥–æ–ª–≥–∏', '–∫—Ä–µ–¥–∏—Ç—ã/–¥–æ–ª–≥–∏'),
}


def categories_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        types.KeyboardButton('–µ–¥–∞'), types.KeyboardButton('–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è'),
        types.KeyboardButton('–±—ã—Ç–æ–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'), types.KeyboardButton('–º–µ–±–µ–ª—å'),
        types.KeyboardButton('–ø–æ—Å—É–¥–∞'), types.KeyboardButton('–¥–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä'),
        types.KeyboardButton('–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã'), types.KeyboardButton('–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥/—à–∫–æ–ª–∞'),
        types.KeyboardButton('–æ–¥–µ–∂–¥–∞'), types.KeyboardButton('—É–∫—Ä–∞—à–µ–Ω–∏—è/–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã'),
        types.KeyboardButton('—Å–ø–æ—Ä—Ç'), types.KeyboardButton('—Ö–æ–±–±–∏'),
        types.KeyboardButton('—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–∫–∞—Ñ–µ'), types.KeyboardButton('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'),
        types.KeyboardButton('—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'), types.KeyboardButton('–∫–æ—Å–º–µ—Ç–∏–∫–∞/—É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'),
        types.KeyboardButton('–∑–¥–æ—Ä–æ–≤—å–µ'), types.KeyboardButton('–¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ'),
        types.KeyboardButton('—Ç–µ—Ö–Ω–∏–∫–∞'), types.KeyboardButton('–∞—Ä–µ–Ω–¥–∞'),
        types.KeyboardButton('–∏–ø–æ—Ç–µ–∫–∞'), types.KeyboardButton('—Ä–µ–º–æ–Ω—Ç'),
        types.KeyboardButton('–∫–æ–º–º—É–Ω–∞–ª–∫–∞'), types.KeyboardButton('–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤'),
        types.KeyboardButton('–∫—Ä–µ–¥–∏—Ç—ã/–¥–æ–ª–≥–∏'), types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    return markup


def days_declension(n: int) -> str:
    if n % 10 == 1 and n % 100 != 11:
        return '–¥–µ–Ω—å'
    elif n % 10 in (2, 3, 4) and n % 100 not in (12, 13, 14):
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'


def get_single_users():
    print(get_single_users)
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute('SELECT single_users.name FROM single_users')
    users = cursor.fetchall()
    connection.close()
    single_users = [user[0] for user in users]
    print(f'single_users = {single_users}')
    return single_users


def get_family_users():
    print('get_family_users')
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute('SELECT family_users.name FROM family_users')
    users = cursor.fetchall()
    connection.close()
    family_users = [user[0] for user in users]
    print(f'family_users = {family_users}')
    return family_users


def get_code_words():
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute('SELECT log_in_to_family.code_word FROM log_in_to_family')
    code_words = cursor.fetchall()
    connection.close()
    code_words = [code_word[0] for code_word in code_words]
    return code_words


def get_passwords(code_word):
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute('SELECT log_in_to_family.password FROM log_in_to_family WHERE code_word=%s',
                   (code_word, ))
    passwords = cursor.fetchall()
    connection.close()
    password = [password[0] for password in passwords]
    return password


def add_single_users_in_database(name):
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute(
        f'INSERT INTO single_users ("name") VALUES (%s)', (name, ))
    connection.commit()
    connection.close()


def add_expenses_to_database(amount, table_name, user):
    today = datetime.now().date().isoformat()  # '2025-08-27'
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute(f'INSERT INTO {table_name} ("name", cost, "date") VALUES (%s, %s, %s)',
                   (user, amount, today))
    connection.commit()
    connection.close()


def get_expenses_in_one_category(category, category_text, username):
    print('—Ä–∏—à–ª–∏ –≤ get_expenses_in_one_category(category, category_text, username)')
    single_users = get_single_users()

    if username in single_users:
        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        
        cursor.execute(f'SELECT COUNT(DISTINCT "date") FROM {category} WHERE "name"=%s', (username,))
        count_of_days = cursor.fetchall()[0][0]
        connection.close()

        if count_of_days == 0:
            return '–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —ç—Ç—É —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤ :)'

        elif 0 < count_of_days < 60:
            day = days_declension(count_of_days)
            connection = psycopg2.connect(DATABASE_URL)
            cursor = connection.cursor()
            cursor.execute(f'''SELECT SUM(cost) FROM {category} WHERE TO_DATE("date", 'YYYY-MM-DD') >= 
            CURRENT_DATE - INTERVAL '59 days' AND "name"=%s''', (username, ))
            result = cursor.fetchall()[0][0]
            connection.close()
            average_amount = int(result) / int(count_of_days)
            return (f'–í—ã –≤–µ–¥—ë—Ç–µ –±—é–¥–∂–µ—Ç *–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_text}" {count_of_days} {day}*.\n\n–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç '
                    f'–ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º: –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ –±—é–¥–∂–µ—Ç —Ö–æ—Ç—è –±—ã 60 –¥–Ω–µ–π :)\n\n–ü–æ–∫–∞–∂—É '
                    f'—Ç–æ, —á—Ç–æ –µ—Å—Ç—å —Å–µ–π—á–∞—Å:\n–∑–∞ *{count_of_days} {day} –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category_text}" –ø–æ—Ç—Ä–∞—á–µ–Ω–æ '
                    f'{result}* üí∏\n*—Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å - {average_amount}* üí∏')

        elif count_of_days == 60:
            pass
            # conn = psycopg2.connect(DATABASE_URL)
            # cursor = conn.cursor()
            # cursor.execute(f'SELECT SUM(cost) FROM {category} WHERE date IN (SELECT DISTINCT date FROM {category}'
            #                f'ORDER BY date ASC LIMIT 30) AND name=?', (username,))
            # # first_30_days = cursor.fetchall()[0][0]
            # first_30_days = cursor.fetchone()[0]
            # conn.close()
            #
            # conn = psycopg2.connect(DATABASE_URL)
            # cursor = conn.cursor()
            # cursor.execute(f'SELECT SUM(cost) FROM {category} WHERE date IN (SELECT DISTINCT date FROM {category}'
            #                f'ORDER BY date ASC LIMIT -1 OFFSET 30) AND name=?', (username,))
            # # second_30_days = cursor.fetchall()[0][0]
            # second_30_days = cursor.fetchone()[0]
            # conn.close()
            #
            # if first_30_days > second_30_days:
            #     average_amount = int(first_30_days + second_30_days) / int(count_of_days)
            #     difference = int(first_30_days) - int(second_30_days)
            #     return (f'–í—ã –≤–µ–¥—ë—Ç–µ –±—é–¥–∂–µ—Ç *{count_of_days}* –¥–µ–Ω—å/–¥–Ω–µ–π.\n–í –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category_text}* '
            #             f'–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ *{first_30_days}*, –≤–æ –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ *{second_30_days}*.\n–í –ø–µ—Ä–≤—ã–π '
            #             f'–º–µ—Å—è—Ü –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ *{difference}* –±–æ–ª—å—à–µ, —á–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π.\n–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å –Ω–∞ '
            #             f'–∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category_text} - {average_amount}*')
            # elif first_30_days == second_30_days:
            #     average_amount = int(first_30_days) / int(count_of_days)
            #     return (f'–í—ã –≤–µ–¥—ë—Ç–µ –±—é–¥–∂–µ—Ç *{count_of_days}* –¥–µ–Ω—å/–¥–Ω–µ–π.\n–í –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –∏ –≤–æ –≤—Ç–æ—Ä–æ–π –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ '
            #             f'–æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É *{second_30_days}* –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category_text}*\n–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å - '
            #             f'*{average_amount}*')
            # elif first_30_days < second_30_days:
            #     average_amount = int(first_30_days + second_30_days) / int(count_of_days)
            #     difference = int(second_30_days) - int(first_30_days)
            #     return (f'–í—ã –≤–µ–¥—ë—Ç–µ –±—é–¥–∂–µ—Ç *{count_of_days}* –¥–µ–Ω—å/–¥–Ω–µ–π.\n–í –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category_text}* '
            #             f'–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ *{first_30_days}*, –≤–æ –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ *{second_30_days}*.\n–í –ø–µ—Ä–≤—ã–π '
            #             f'–º–µ—Å—è—Ü –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ *{difference}* –º–µ–Ω—å—à–µ, —á–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π.\n–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å –Ω–∞ '
            #             f'–∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category} - {average_amount}*')

        elif count_of_days > 60:
            pass

    else:
        print('—Ä–∏—à–ª–∏ –≤ else')
        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute('SELECT family_users.family_number FROM family_users WHERE "name"=%s', (username,))
        family_number = cursor.fetchall()[0][0]
        print('–ø–æ–ª—É—á–∏–ª–∏ family_number')
        connection.close()

        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute('SELECT family_users.name FROM family_users WHERE family_number=%s',
                       (family_number,))
        family = cursor.fetchall()
        family = [name[0] for name in family]
        print('–ø–æ–ª—É—á–∏–ª–∏ family')
        connection.close()

        all_days = []
        total_amount = 0
        for name in family:
            connection = psycopg2.connect(DATABASE_URL)
            cursor = connection.cursor()
            cursor.execute(f'SELECT "date" FROM {category} WHERE "name"=%s', (name,))
            all_days_one_name = cursor.fetchall()
            connection.close()

            all_days_one_name = [date[0] for date in all_days_one_name]

            for day in all_days_one_name:
                all_days.append(day)

            connection = psycopg2.connect(DATABASE_URL)
            cursor = connection.cursor()
            cursor.execute(f'SELECT COUNT(DISTINCT "date") FROM {category} WHERE "name"=%s', (name,))
            count_of_days_one_name = cursor.fetchall()[0][0]
            print('–ø–æ–ª—É—á–∏–ª–∏ count_of_days_one_name')
            print(f'count_of_days_one_name = {count_of_days_one_name}')
            connection.close()
            if count_of_days_one_name != 0:
                print('if count_of_days_one_name != 0:')

                if count_of_days_one_name < 60:
                    print('count_of_days_one_name < 60:')
                    connection = psycopg2.connect(DATABASE_URL)
                    cursor = connection.cursor()
                    cursor.execute(f'''SELECT SUM(cost) FROM {category} WHERE TO_DATE("date", 'YYYY-MM-DD') 
                    >= CURRENT_DATE - INTERVAL '59 days' AND "name"=%s''', (name, ))
                    result = cursor.fetchone()[0]
                    print(f'result = {result}')
                    total_amount += result
                    connection.close()

                elif count_of_days_one_name == 60:
                    pass

                elif count_of_days_one_name > 60:
                    pass

        all_days = len(set(all_days))
        print(f'all_days = {all_days}')
        if all_days != 0 and total_amount != 0:
            print('f all_days != 0 and total_amount != 0')
            day = days_declension(all_days)
            average_amount = int(total_amount) / int(all_days)
            if all_days < 60:
                print('if all_days < 60:')
                return (f'–í–∞—à–∞ —Å–µ–º—å—è –≤–µ–¥—ë—Ç –±—é–¥–∂–µ—Ç *–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_text}" {all_days} {day}*.\n\n–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ '
                        f'–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º: –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ –±—é–¥–∂–µ—Ç —Ö–æ—Ç—è –±—ã 60 –¥–Ω–µ–π :)'
                        f'\n\n–ü–æ–∫–∞–∂—É —Ç–æ, —á—Ç–æ –µ—Å—Ç—å —Å–µ–π—á–∞—Å:\n–∑–∞ *{all_days} {day} –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category_text}" '
                        f'–ø–æ—Ç—Ä–∞—á–µ–Ω–æ {total_amount}* üí∏\n*—Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å - {average_amount}* üí∏')

            elif all_days == 60:
                pass

            elif all_days > 60:
                pass

        else:
            return '–í–∞—à–∞ —Å–µ–º—å—è –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∞ —ç—Ç—É —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤ :)'


def get_expenses_in_one_month(username):
    single_users = get_single_users()
    if username in single_users:
        all_data = ''
        all_amount = 0
        for category in categories:
            table = categories.get(category)[0]
            word = categories.get(category)[2]
            connection = psycopg2.connect(DATABASE_URL)
            cursor = connection.cursor()
            cursor.execute(f'SELECT "name" FROM {table}')
            names = cursor.fetchall()
            connection.close()
            names = [name[0] for name in names]
            if username in names:
                connection = psycopg2.connect(DATABASE_URL)
                cursor = connection.cursor()
                cursor.execute(f'''SELECT SUM(cost) FROM {table} WHERE TO_DATE("date", 'YYYY-MM-DD') >= 
                CURRENT_DATE - INTERVAL '30 days' AND "name"=%s''', (username, ))
                amount = cursor.fetchall()[0][0]
                connection.close()

                all_amount += int(amount)
                connection = psycopg2.connect(DATABASE_URL)
                cursor = connection.cursor()
                cursor.execute(f'''SELECT COUNT(DISTINCT "date") FROM {table} WHERE TO_DATE("date", 'YYYY-MM-DD') 
                >= CURRENT_DATE - INTERVAL '30 days' AND "name"=%s''', (username, ))
                count_of_days = cursor.fetchall()[0][0]
                connection.close()
                average_amount = int(amount) / int(count_of_days)
                text = (f'*{word.upper()}:*\n–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–∞—á–µ–Ω–æ - *{amount}* üí∏\n'
                        f'—Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å - *{average_amount}* üí∏\n\n')
                all_data += text

            else:
                return '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –≤–µ—Å—Ç–∏ —Å–≤–æ–π –±—é–¥–∂–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:)'

        all_data += f'*{all_amount} - –û–ë–©–ê–Ø –°–£–ú–ú–ê, –ü–û–¢–†–ê–ß–ï–ù–ù–ê–Ø –ó–ê –ú–ï–°–Ø–¶*\nüò≥'
        return all_data

    else:
        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute('SELECT family_users.family_number FROM family_users WHERE "name"=%s', (username,))
        family_number = cursor.fetchall()[0][0]
        connection.close()

        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute('SELECT family_users.name FROM family_users WHERE family_number=%s',
                       (family_number,))
        family = cursor.fetchall()
        family = [name[0] for name in family]
        connection.close()

        all_data = ''
        all_amount = 0

        for category in categories:
            table = categories.get(category)[0]
            word = categories.get(category)[2]
            connection = psycopg2.connect(DATABASE_URL)
            cursor = connection.cursor()
            cursor.execute(f'SELECT "name" FROM {table}')
            names = cursor.fetchall()
            connection.close()
            names = list(set([name[0] for name in names]))

            amount_category = 0
            days_category = []

            for name in family:
                if name in names:
                    connection = psycopg2.connect(DATABASE_URL)
                    cursor = connection.cursor()
                    cursor.execute(f'''SELECT SUM(cost) FROM {table} WHERE TO_DATE("date", 'YYYY-MM-DD') >= 
                    CURRENT_DATE - INTERVAL '30 days' AND "name"=%s''', (name, ))
                    amount = cursor.fetchall()[0][0]
                    connection.close()

                    amount_category += int(amount)

                    connection = psycopg2.connect(DATABASE_URL)
                    cursor = connection.cursor()
                    cursor.execute(f'''SELECT "date" FROM {table} WHERE TO_DATE("date", 'YYYY-MM-DD') >= 
                    CURRENT_DATE - INTERVAL '30 days' AND "name"=%s''', (name, ))
                    all_days_one_name = cursor.fetchall()
                    connection.close()
                    all_days_one_name = [date[0] for date in all_days_one_name]

                    for day in all_days_one_name:
                        days_category.append(day)

            days_category = len(set(days_category))
            if days_category != 0:
                average_amount = int(amount_category) / int(days_category)
                text = (f'*{word.upper()}:*\n–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–∞—á–µ–Ω–æ - *{amount_category}* üí∏\n'
                        f'—Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å - *{average_amount}* üí∏\n\n')

                all_data += text
                all_amount += amount_category

        if all_amount != 0:
            all_data += f'*{all_amount} - –û–ë–©–ê–Ø –°–£–ú–ú–ê, –ü–û–¢–†–ê–ß–ï–ù–ù–ê–Ø –ó–ê –ú–ï–°–Ø–¶*\nüò≥'
            return all_data
        else:
            return '–í–∞—à–∞ —Å–µ–º—å—è –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞ –≤–µ—Å—Ç–∏ —Å–≤–æ–π –±—é–¥–∂–µ—Ç :)'


def start_family_in_database(text, column_name, name):
    if column_name == 'code_word':
        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute(f'INSERT INTO log_in_to_family ("name", code_word, "password", family_number) '
                       f'VALUES (%s, %s, %s, %s)', (name, text, 0, 0))
        connection.commit()
        connection.close()

        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute('SELECT log_in_to_family.id FROM log_in_to_family')
        id_names = cursor.fetchall()
        id_names = [id_name[0] for id_name in id_names]
        id_names.sort()
        last_id = id_names[-1]
        connection.close()

        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute(f'INSERT INTO family_users ("name", family_number) VALUES (%s, %s)',
                       (name, last_id))
        cursor.execute(f'UPDATE log_in_to_family SET family_number=%s WHERE family_number=%s AND "name"=%s',
                       (last_id, 0, name))
        connection.commit()
        connection.close()

    elif column_name == 'password':
        connection = psycopg2.connect(DATABASE_URL)
        cursor = connection.cursor()
        cursor.execute(f'UPDATE log_in_to_family SET "password"=%s WHERE "password"=%s AND "name"=%s',
                       (text, 0, name))
        connection.commit()
        connection.close()


def add_family_in_database(username, password):
    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute(
        'SELECT log_in_to_family.family_number FROM log_in_to_family WHERE "password"=%s', (password, ))
    family_number = cursor.fetchall()[0][0]
    connection.close()

    connection = psycopg2.connect(DATABASE_URL)
    cursor = connection.cursor()
    cursor.execute(f'INSERT INTO family_users (name, family_number) VALUES (%s, %s)',
                   (username, family_number))
    connection.commit()
    connection.close()


@bot.message_handler(commands=['start', ])
def start(message: telebot.types.Message):
    if message.chat.type == 'private':
        username = message.from_user.username
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        single_users = get_single_users()
        family_users = get_family_users()

        if username in single_users or username in family_users:
            markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'), types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'))
            bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–µ—à–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å "
                                                   ":)".format(message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, actions)

        else:
            markup.add(types.KeyboardButton('–°–µ–º–µ–π–Ω—ã–π'), types.KeyboardButton('–û–¥–∏–Ω–æ—á–Ω—ã–π'))
            bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –ù–∞—á–Ω—ë–º! üòå\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ, –∫–∞–∫ '
                                                   '–≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –±—é–¥–∂–µ—Ç: –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –≤—Å–µ–π —Å–µ–º—å—ë–π '
                                                   ':)'.format(message.from_user),
                             reply_markup=markup)
            bot.register_next_step_handler(message, family_or_single)


@bot.message_handler(content_types=['text', ])
def family_or_single(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text == '–°–µ–º–µ–π–Ω—ã–π':
                markup.add(types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                           types.KeyboardButton('–ù–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏–ª–∏ —Ç–æ–ª—å–∫–æ '
                                                       '—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ —á–∞—Ç —Å –±—é–¥–∂–µ—Ç–æ–º?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ :)',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, actions_with_family_budget)

            elif message.text == '–û–¥–∏–Ω–æ—á–Ω—ã–π':
                add_single_users_in_database(username)
                buttons = categories_buttons()
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å :)',
                                 reply_markup=buttons)
                bot.register_next_step_handler(message, choose_category)

            else:
                markup.add(types.KeyboardButton('–°–µ–º–µ–π–Ω—ã–π'), types.KeyboardButton('–û–¥–∏–Ω–æ—á–Ω—ã–π'))
                bot.send_message(message.chat.id,
                                 text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—åüòå\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, '
                                      '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
                bot.register_next_step_handler(message, family_or_single)
        else:
            markup.add(types.KeyboardButton('–°–µ–º–µ–π–Ω—ã–π'), types.KeyboardButton('–û–¥–∏–Ω–æ—á–Ω—ã–π'))
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö '
                                  '–Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, family_or_single)


def actions_with_family_budget(message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text == '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º':
                bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ :)', reply_markup=markup)
                bot.register_next_step_handler(message, enter_code_word)

            elif message.text == '–ù–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º':
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º '
                                                       '–≤—ã –±—É–¥–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º :)\n–°–∫–∞–∂–∏—Ç–µ —ç—Ç–æ '
                                                       '–Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —á–ª–µ–Ω–∞–º –≤–∞—à–µ–π —Å–µ–º—å–∏, '
                                                       '—á—Ç–æ–±—ã –æ–Ω–∏ —Ç–∞–∫–∂–µ —Å–º–æ–≥–ª–∏ –≤–æ–π—Ç–∏ –∏ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ–º–µ–π–Ω—ã–π '
                                                       '–±—é–¥–∂–µ—Ç üòå\n–ù–∞–ø—Ä–∏–º–µ—Ä: *"–ì—É—Å–∏ —â–∏–ø–∞—é—Ç –¥–µ—Ç–µ–π"/—Ö—Ä—é—à–∫–∏-—Ö–∏—Ç—Ä—é—à–∫–∏*\n'
                                                       '–í—Å—ë —ç—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –±—é–¥–∂–µ—Ç–æ–º: '
                                                       '–ø–æ—Å–ª–µ –±–æ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç '
                                                       '—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å :)\n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)',
                                 reply_markup=markup, parse_mode='Markdown')
                bot.register_next_step_handler(message, start_family, 'code_word',
                                               '–Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ',
                                               '"–ì—É—Å–∏ —â–∏–ø–∞—é—Ç –¥–µ—Ç–µ–π"/—Ö—Ä—é—à–∫–∏-—Ö–∏—Ç—Ä—é—à–∫–∏"', '–ù–∞–∑–≤–∞–Ω–∏–µ')

            else:
                markup.add(types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                           types.KeyboardButton('–ù–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id,
                                 text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—åüòå')
                bot.send_message(message.chat.id, text='–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏–ª–∏ —Ç–æ–ª—å–∫–æ '
                                                       '—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ —á–∞—Ç —Å –±—é–¥–∂–µ—Ç–æ–º?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ :)',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, actions_with_family_budget)
        else:
            markup.add(types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                       types.KeyboardButton('–ù–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º'),
                       types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå')
            bot.send_message(message.chat.id, text='–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏–ª–∏ —Ç–æ–ª—å–∫–æ '
                                                   '—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ —á–∞—Ç —Å –±—é–¥–∂–µ—Ç–æ–º?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ :)',
                             reply_markup=markup)
            bot.register_next_step_handler(message, actions_with_family_budget)


def actions(message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
                buttons = categories_buttons()
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é :)', reply_markup=buttons)
                bot.register_next_step_handler(message, choose_category)

            elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
                markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π'),
                           types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)', reply_markup=markup)
                bot.register_next_step_handler(message, view_expenses)

            else:
                markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'), types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'))
                bot.send_message(message.chat.id,
                                 text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—åüòå\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, '
                                      '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
                bot.register_next_step_handler(message, actions)
        else:
            markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'), types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'))
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö '
                                  '–Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, actions)


def start_family(message, column_name, text, example, code_word_or_password):
    username = message.from_user.username
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            else:
                if code_word_or_password == '–ù–∞–∑–≤–∞–Ω–∏–µ':
                    start_family_in_database(message.text, column_name, username)
                    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    answer = (f'{code_word_or_password} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ :)'
                              f'\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞ :)\n–ù–∞–ø—Ä–∏–º–µ—Ä: *1223* :)')
                    bot.send_message(message.chat.id, text=answer, parse_mode='Markdown')
                    bot.register_next_step_handler(message, start_family, 'password', '—Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–∞—Ä–æ–ª—å',
                                                   '"34556"', '–ü–∞—Ä–æ–ª—å')

                elif code_word_or_password == '–ü–∞—Ä–æ–ª—å':
                    if message.text.isdigit():
                        start_family_in_database(message.text, column_name, username)
                        answer = f'{code_word_or_password} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ'
                        bot.send_message(message.chat.id, text=answer)
                        buttons = categories_buttons()
                        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é :)', reply_markup=buttons)
                        bot.register_next_step_handler(message, choose_category)
                    else:
                        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        bot.send_message(message.chat.id,
                                         text=f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º üòî\n*{message.text}*\n'
                                              f'–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–∞—Ä–æ–ª—å :)\n–ù–∞–ø—Ä–∏–º–µ—Ä: *1223* :)',
                                         parse_mode='Markdown', reply_markup=markup)
                        bot.register_next_step_handler(message, start_family, 'password', '—Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–∞—Ä–æ–ª—å',
                                                       '"34556"', '–ü–∞—Ä–æ–ª—å')

        else:
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå')
            bot.send_message(message.chat.id, text=f'–ü—Ä–∏–¥—É–º–∞–π—Ç–µ {text}, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º '
                                                   f':)\n–°–∫–∞–∂–∏—Ç–µ —ç—Ç–æ {text} —á–ª–µ–Ω–∞–º –≤–∞—à–µ–π —Å–µ–º—å–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–∞–∫–∂–µ '
                                                   f'—Å–º–æ–≥–ª–∏ –≤–æ–π—Ç–∏ –∏ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç üòå\n'
                                                   f'–ù–∞–ø—Ä–∏–º–µ—Ä: *{example}\n'
                                                   '–í—Å—ë —ç—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –±—é–¥–∂–µ—Ç: –ø–æ—Å–ª–µ –±–æ—Ç '
                                                   '–∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å :)\n'
                                                   '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)',
                             reply_markup=markup, parse_mode='Markdown')
            bot.register_next_step_handler(message, start_family, column_name, text, example)


def enter_code_word(message):
    if message.chat.type == 'private':
        code_words = get_code_words()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text in code_words:
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å :)', reply_markup=markup)
                bot.register_next_step_handler(message, enter_password, message.text)

            else:
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text=f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ {message.text} üòî'
                                                       f'\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ :)', reply_markup=markup)
                bot.register_next_step_handler(message, enter_code_word)
        else:
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå')
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ :)', reply_markup=markup)
            bot.register_next_step_handler(message, enter_code_word)


def enter_password(message, code_word):
    if message.chat.type == 'private':
        username = message.from_user.username
        passwords = get_passwords(code_word)
        print(f'passwords = {passwords}')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif int(message.text) in passwords:
                add_family_in_database(username, message.text)
                markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'), types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'))
                bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ ‚úÖ\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–¥–µ–Ω–∏—é —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ :)'
                                                       '\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=markup)
                bot.register_next_step_handler(message, actions)

            else:
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text=f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å {message.text} üòî'
                                                       f'\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ :)', reply_markup=markup)
                bot.register_next_step_handler(message, enter_password, code_word)
        else:
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå')
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å :)', reply_markup=markup)
            bot.register_next_step_handler(message, enter_password, code_word)


def choose_category(message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text in categories:
                table_name = categories.get(message.text)[0]
                word = categories.get(message.text)[1]
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í–Ω–µ—Å–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞)\n*–ù–∞–ø—Ä–∏–º–µ—Ä, "3000" :)*',
                                 reply_markup=markup, parse_mode='Markdown')
                bot.register_next_step_handler(message, add_expenses, table_name, word)

            else:
                buttons = categories_buttons()
                bot.send_message(message.chat.id, text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å üòå\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '
                                                       ':)'.format(message.from_user), reply_markup=buttons)
                bot.register_next_step_handler(message, choose_category)

        else:
            buttons = categories_buttons()
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '
                                  ':)'.format(message.from_user), reply_markup=buttons)
            bot.register_next_step_handler(message, choose_category)


def add_expenses(message, table_name, word):
    if message.chat.type == 'private':
        username = message.from_user.username
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            else:
                data = ''
                for elem in message.text:
                    if elem != ' ':
                        data += elem

                if data.isdigit():
                    if data != '0':
                        add_expenses_to_database(data, table_name, username)
                        bot.send_message(message.chat.id, text=f'*–°—É–º–º–∞, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è –Ω–∞ {word}, –≤–Ω–µ—Å–µ–Ω–∞ üî•*',
                                         parse_mode='Markdown')
                        markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'),
                                   types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'))
                        bot.send_message(message.chat.id, text='–†–µ—à–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å :)', reply_markup=markup)
                        bot.register_next_step_handler(message, actions)
                    else:
                        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        bot.send_message(message.chat.id, text=f'–í—ã –≤–≤–µ–ª–∏ "0" üòå\n–ï—Å–ª–∏ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏, —Ç–æ –Ω–µ '
                                                               f'–Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å :)\n–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –≤–≤–µ–¥—è "0", '
                                                               f'—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Å—É–º–º—É, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ {word} –≤ '
                                                               f'–≤–∏–¥–µ —á–∏—Å–ª–∞ :)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 500\n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å '
                                                               f'–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)', reply_markup=markup)
                        bot.register_next_step_handler(message, add_expenses, table_name, word, )
                else:
                    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    bot.send_message(message.chat.id, text=f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ '
                                                           f'<{message.text}> üò∂\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Å—É–º–º—É, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é '
                                                           f'–Ω–∞ {word} –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ :)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 500\n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å '
                                                           f'–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)', reply_markup=markup)
                    bot.register_next_step_handler(message, add_expenses, table_name, word, )
        else:
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, text=f'–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, '
                                                   f'–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ {word} –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ :)\n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ '
                                                   f'–º–µ–Ω—é :)', reply_markup=markup)
            bot.register_next_step_handler(message, add_expenses, table_name, word)


def view_expenses(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π':
                answer = get_expenses_in_one_month(username)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text=answer, reply_markup=markup, parse_mode='Markdown')
                bot.register_next_step_handler(message, actions)

            elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
                buttons = categories_buttons()
                bot.send_message(message.chat.id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üòå'.format(message.from_user), reply_markup=buttons)
                bot.register_next_step_handler(message, view_expenses_in_one_category)

            else:
                markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π'),
                           types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
                bot.send_message(message.chat.id,
                                 text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å üòå\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, '
                                      '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
                bot.register_next_step_handler(message, view_expenses)

        else:
            markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π'),
                       types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö '
                                  '–Ω–∏–∂–µ :)'.format(message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, view_expenses)


def view_expenses_in_one_category(message):
    print('–ø—Ä–∏—à–ª–∏ –≤ view_expenses_in_one_category(message)')
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        username = message.from_user.username
        if type(message.text) is str:

            if message.text == '/start' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start(message)

            elif message.text in categories:
                print('–ø—Ä–∏—à–ª–∏ –≤ message.text in categories')
                table_name = categories.get(message.text)[0]
                answer = get_expenses_in_one_category(table_name, message.text, username)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text=answer, reply_markup=markup, parse_mode='Markdown')
                bot.register_next_step_handler(message, actions)

            else:
                buttons = categories_buttons()
                bot.send_message(message.chat.id,
                                 text='–ù–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å üòå\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é '
                                      '—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)'.format(message.from_user), reply_markup=buttons)
                bot.register_next_step_handler(message, view_expenses_in_one_category)

        else:
            buttons = categories_buttons()
            bot.send_message(message.chat.id,
                             text='–í—ã —à–ª–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫–∏ üòå\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é '
                                  '—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)'.format(message.from_user), reply_markup=buttons)
            bot.register_next_step_handler(message, view_expenses_in_one_category)


if __name__ == "__main__":
    print('in if __name__ == "__main__"')
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
